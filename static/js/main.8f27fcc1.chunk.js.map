{"version":3,"sources":["logo.svg","Components/TodoRedux.js","actions/Action.js","App.js","reportWebVitals.js","Reducer/reducer.js","Reducer/index.js","store/store.js","index.js"],"names":["TodoRedux","useState","updateItems","setUpdateditems","values","setValues","toggleBtn","setToggleBtn","dispatch","useDispatch","list","useSelector","state","todoReducer","listt","useEffect","console","log","updateList","Data","data","type","payload","id","className","Description","placeholder","value","onChange","e","target","onClick","Edit","alert","Date","getTime","toString","Add","map","Element","GettingId","find","elem","editItem","Delete","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","newList","filter","updatedTodo","todo","rootreducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f27fcc1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport \"../index.css\"\r\nimport { Description, Add, Delete, Edit } from \"@material-ui/icons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addTodo, deleteTodo, allClearTodo, UpdataTodo } from \"../actions/Action\";\r\n\r\nconst TodoRedux = () => {\r\n    const [updateItems,setUpdateditems] = useState(null)\r\n    const [values, setValues] = useState(\"\");\r\n    const [toggleBtn, setToggleBtn] = useState(false);\r\n    const inputValue = (e) => {\r\n        setValues(e.target.value);\r\n    };\r\n\r\n    const dispatch = useDispatch()\r\n    const list = useSelector((state) => state.todoReducer.list)\r\n    const listt = useSelector((state) => state)\r\n\r\n    useEffect(() => {\r\n        console.log(list)\r\n    },[])\r\n\r\n    const addList = () => {\r\n        if(values === \"\"){\r\n            alert(\"Not Submit Empty Data\")\r\n        }else {\r\n            dispatch(addTodo(values))\r\n        }\r\n        setValues('')\r\n    }\r\n\r\n    const editItem = (data) => {\r\n        setToggleBtn(true)\r\n        const GettingId = list.find((elem) => {\r\n            \r\n            return (\r\n                elem.id === data\r\n            )\r\n        })\r\n\r\n        console.log(GettingId.id)\r\n        setValues(GettingId.data)\r\n        setUpdateditems(GettingId.id)\r\n    }\r\n\r\n    const updateList = (Data) => {\r\n        setToggleBtn(false)\r\n        dispatch(UpdataTodo({Data,values}))\r\n        setValues('')\r\n        console.log(\"useSelector\",listt)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"main-div \">\r\n                <div className=\"child-div\">\r\n                    <Description className=\"todolog\" />\r\n                    <h1>Add Your List Here ✌ </h1>\r\n\r\n                    <div className=\"input d-flex mt-3\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"✍ Add Items...\"\r\n                            value={values}\r\n                            onChange={inputValue}\r\n                        />\r\n                        {\r\n                            toggleBtn ? (\r\n                                <>\r\n                                    <button className=\"btn btn-primary mt-3\" onClick={() => updateList(updateItems)}>\r\n                                        <Edit />\r\n                                    </button>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <button className=\"btn btn-primary mt-3\" onClick={addList}>\r\n                                        <Add />\r\n                                    </button>\r\n                                </>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    {\r\n                        list.map((Element) =>\r\n                            <div className=\"showitems d-flex justify-content-between mt-5\" key={Element.id}>\r\n                                <h3 className=\"mt-2\">{Element.data}</h3>\r\n                                <button className=\"btn edit\" onClick={() => editItem(Element.id)}>\r\n                                    <Edit />\r\n                                </button>\r\n                                <button className=\"btn delete\" onClick={() => dispatch(deleteTodo(Element.id))}>\r\n                                    <Delete />\r\n                                </button>\r\n                            </div>\r\n                        )\r\n                    }\r\n\r\n                    <div className=\"button mt-5\">\r\n                        <button className=\"btn btn-secondary\" onClick={() => dispatch(allClearTodo())} >Clear List</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoRedux","export const addTodo = (data) => {\r\n    return {\r\n        type: \"Add_Todo\",\r\n        payload: {\r\n            id: new Date().getTime().toString(),\r\n            data: data\r\n        }\r\n    }\r\n}\r\nexport const deleteTodo = (id) => {\r\n    return {\r\n        type: \"Delete_Todo\",\r\n        id\r\n    }\r\n}\r\nexport const allClearTodo = () => {\r\n    return {\r\n        type: \"All_Clear_Todo\"\r\n    }\r\n}\r\n\r\nexport const UpdataTodo = (data) => {\r\n    console.log(\"UpdataTodo\",data)\r\n    return {\r\n        type: \"Update_Todo\",\r\n        payload: {\r\n            id: data.Data,\r\n            data: data.values\r\n        }\r\n    }\r\n}","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Todo from './Components/Todo';\r\nimport TodoRedux from './Components/TodoRedux'\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <TodoRedux/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {\r\n    list: []\r\n}\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case \"Add_Todo\":\r\n            const { id, data } = action.payload;\r\n            return {\r\n                ...state,\r\n                list: [\r\n                    ...state.list,\r\n                    {\r\n                        id: id,\r\n                        data: data\r\n                    }\r\n                ]\r\n            }\r\n        case \"Delete_Todo\":\r\n            const newList = state.list.filter((elem) => elem.id !== action.id)\r\n            return {\r\n                ...state,\r\n                list: newList\r\n            }\r\n        case \"All_Clear_Todo\":\r\n            return {\r\n                ...state,\r\n                list: []\r\n            }\r\n        case \"Update_Todo\":\r\n            console.log(\"action.payload\",action.payload)\r\n            const updatedTodo = state.list.map((todo) => {\r\n                if(todo.id === action.payload.id){\r\n                    return {...todo, data: action.payload.data}\r\n                } \r\n                return todo\r\n            });\r\n            return {\r\n                ...state,\r\n                list: updatedTodo  \r\n            };\r\n            // const updatedTodo = state.list.filter((todo) => {\r\n            //     if(todo.id === action.payload.id){\r\n            //     return {...todo, data: action.payload.data}}\r\n            // })\r\n\r\n            // return {\r\n            //     ...state,\r\n            //     list: updatedTodo\r\n            // }\r\n            \r\n\r\n            // console.log(\"action\",action)\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import todoReducer from './reducer'\r\n\r\nimport {combineReducers} from 'redux'\r\n\r\nconst rootreducer = combineReducers({\r\n    todoReducer\r\n})\r\n\r\nexport default rootreducer","import { createStore } from \"redux\";\r\n\r\nimport rootreducer from \"../Reducer\";\r\n\r\nconst store = createStore(rootreducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./store/store\"\r\n\r\nReactDOM.render(\r\n  <>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}